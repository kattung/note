* allow large file in git
  Note: Do not modify .gitattributes by yourself

  1. Install git lfs (may have installed by default)
  2. Provide filename that need to be tracked
     example: *.tar.bz2
     $ git lfs track "*.tar.bz2"
     You will see below line added to .gitattributes
     ---
     *.tar.bz2 filter=lfs diff=lfs merge=lfs -text
     ---
  3. Commit new files (*.tar.bz2)
     The files will be tracked by Git LFS
  4. Check which files are tracked as LFS
     $ git lfs ls-files

  Not tracked files will encounter error of "should have been pointers"
  Reference: https://ephrain.net/git-git-clone-%E6%99%82%E5%87%BA%E7%8F%BE-encountered-xx-files-that-should-have-been-pointers-but-werent-%E7%9A%84%E9%8C%AF%E8%AA%A4%E8%A8%8A%E6%81%AF/

* show time in PDT git
  > git show/log
    This only need to be done once, and it will write setting to ~/.gitconfig
    0. Check if your server show time in PDT
    1. In server that is in PDT time
       $ git config --global log.date local

       ~/.gitconfig
       ---
       [log]
           date = local
       ---

    2. Your server want to show another time
       $ TZ=UTC+8 git log --date=format-local:'%T %d %m %Y'
  > tig
    Write below in ~/.tigrc
    ---
    set main-view-date-local = yes
    ---

* run git outside of directory
  git -C <path> <command>

  -C <path>
       Run as if git was started in <path> instead of the current
       working directory. When multiple -C options are given, each
       subsequent non-absolute -C <path> is interpreted relative to
       the preceding -C <path>.

       This option affects options that expect path name like --git-dir
       and --work-tree in that their interpretations of the path names
       would be made relative to the working directory caused by the -C option.
       For example the following invocations are equivalent:

           git --git-dir=a.git --work-tree=b -C c status
           git --git-dir=c/a.git --work-tree=c/b status

  example:
  git -C ~/my-git-repo checkout -b new_branch origin/new_branch


* force push
# git push --force
  It is highly recommended using '--force-with-lease' over '--force',
  since it has a few more safety mechanisms built in.
# git push --force-with-lease
  This option allows you to say that you expect the history you are updating
  is what you rebased and want to replace. If the remote ref still points at the commit
  you specified, you can be sure that no other people did anything to the ref.
  It is like taking a "lease" on the ref without explicitly locking it,
  and the remote ref is updated only if the "lease" is still valid.

* set upstream
  If unable to push to remote, it may be the problem of not setting track
  use '-u' when git push
  example:
  git push origin test_branch ==> encounter error
  use below instead
  git push -u origin test_branch

* git log pretty format
  https://git-scm.com/docs/git-shortlog
  - Placeholders that affect formatting of later placeholders
    %<|(<N>): make the next placeholder take at least until Nth columns,
              padding spaces on the right if necessary
  - Placeholders:
    %h:  commit hash
    %an: author name
    %as: author date
    %s:  subject
  - Example:
    git log --oneline --pretty=format:"%h %as %<(18)%an %s" -10

* list files in git repository
# git ls-files

* git bisect
# git bisect start (start git bisect)
# git bisect reset (exit  git bisect)
# git status
# git bisect good <commit>
# git bisect bad <commit>

* MINGW64: cannot use vim when 'git commit'
    Error message: "cannot spawn /usr/bin/vim: No such file or directory"
    Solution 1: set core.editor to 'vim' only
        edit ~/.gitconfig
        ---
        [core]
        -   editor = /usr/bin/vim
        +   editor = vim
        ---
    Solution 2:
    # git config --global core.editor vim

* Create a non-bare git repository for push
# git init
# git add .
# git commit -m 0
# git config --local receive.denyCurrentBranch updateInstead

  Then, local can git clone and git push as usual.
  Reference: https://stackoverflow.com/questions/1764380/how-to-push-to-a-non-bare-git-repository


* Install git on Windows
1. Download git from https://git-scm.com/downloads
2. All set as default when install
3. Modify ~/.gitconfig as below
   ---
   [core]
   autocrlf = false
   ---
   Reference: https://blog.miniasp.com/post/2013/09/15/Git-for-Windows-Line-Ending-Conversion-Notes


* Find which commit remove a given pattern
# git log -G<pattern> -p <file>

* Find which tag contains a given commit
# git tag --contains <commit>

* git checkout all branches
  ---- script ----
  #!/bin/bash
  for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master`; do
     git branch --track ${branch#remotes/origin/} $branch
  done
  ----------------

* git push all branches
  git push --all <remote>

* Show which files in git repository:
# git ls-tree --full-tree -r HEAD

* Show branch trace history (which remote branch is followed)
# git branch -lvv

* Show file related commit even if it has been deleted
  git log --stat -- <file_path>

* Show which commits changed certain files
  git whatchanged <file_path>
  git log <file_path>
  tig <file_path>

* Show file difference between two commits
  git whatchanged -p <commit1>..<commit2> <file_path>


- git clone    (Download the whole repository)
# git clone http://git.denx.de/u-boot.git
  git clone -s -l  (Used when clone local directory in the same computer,
                    the '-s -l' parameter avoid create hard link in the new repository)


- git pull  (Download and update current branch)

- git fetch                   (Download from remote repository)
  git fetch <remote>          (Download all branches from remote repository>
  git fetch <remote> <branch> (Download certain branch from remote repository>


- git branch      (Show all local branches)
  git branch -a   (Show all local and remote branches)
  git branch -d <branch>  (Delete local branch which has been merged)
  git branch -D <branch>  (Delete local branch (force delete))
  git branch -d -r <remote>/<branch>  (Delete remote tracking branch.
                                       This will NOT delete the branch on the remote repository.)
  git branch -m [<old_name>] <new_name>  (Rename branch)

- git checkout
  git checkout <branch>    (Switch to another branch)
  git checkout <file>      (Abandant change of file, and reset to the one in git repository)
  git checkout -b <new_branch>               (Create a new branch cloned from current branch and switch to new)
  git checkout -b <new_branch> <old_branch>  (Create a new branch cloned from old branch and switch to new)
  git checkout -b <new_branch> <commit/tag>  (Create a new branch cloned from commit/tag and switch to new)


- git remote
  git remote show             (Show all remote repository)
  git remote show <remote>    (Show information about a certain remote repository,
                               such as link and permission)
  example:
  # git remote show origin
  git remote add <remote> <url>     (Add remote respoitory)
  git remote remove <remote>        (Remove remote respoitory)
  git remote set-url <remote> <url> (Change remote url)
  git config --get remote.origin.url (Show remote url)
  git remote update                 (Get update from remote repository)

* Deletes all stale remote-tracking branches
  git remote prune [--dry-run] <remote>
    Deletes all stale remote-tracking branches under <name>.
    These stale branches have already been removed from the remote
    repository referenced by <name>, but are still locally available in "remotes/<name>".
    With --dry-run option, report what branches will be pruned, but do not actually prune them.


- git status    (Show status of current repository, such as untracted files and conflicts)
- git blame <file> (Show who and which commit modify each line in file)
- git cherry-pick <commit>  (Apply commit from other branch to current branch)
- git revert <commit>   (Revert commit changes)

- git tag                        (Show all tags)
  git tag -a tag_name [<commit>] (Create tag)
  git tag -d tag_name            (Delete tag)
  git show <tag_name>            (Show tag content)
  git push <remote> <tag_name>   (Push one tag to remote repository)
  git push <remote> --tags       (Push all tags to remote repository)
  git fetch --tags               (Fetch only tags, but not specify remote)
  git fetch <remote> 'refs/tags/*:refs/tags/* (Fetch only tags from a specific remote)

* git fetch one tag without download all repository
# git fetch <remote> tag <tag> --no-tags


- git stash       (stash un-stage changes)
  git stash show  (show stashed changes)
  git stash apply (get stashed changes back to working directory)
  git stash list  (show all the stashes)
  git stash show -p <index> (show stash content)
    ex: git stash show -p stash@{2}
  git stash apply --index <index> (apply one stash)
    ex: git stash apply --index stash@{2}

- git diff      (Show un-stage changes)
  git diff <branch/commit> (Show difference between given branch/commit and current status)

* create diff files
  git diff HEAD^..HEAD filename > 1.diff
* apply diff
  patch -p1 < 1.diff   (-p1: remove the first part of file path)

- git show <git_commit> (Show content of a commit)
  git show <git_commit> --name-only (Only show files that modified in this commit)
  git show <git_commit> --pretty=fuller (Also show merge date/commit date)

- git rm          (Remove a file from both git tree and directory)
- git rm --cache  (Remove a file from both git tree, but keep in directory)

* Fix the last commit
  git commit --amend
    you can change commit comment (and the commit hash will be changed every time you do it)
    if you have staging change, it will be merged to previous commit

- git format-patch <commits>   (Create patches)
  git format-patch HEAD^       (Create patch for the last commit)
  git format-patch HEAD~<n>    (Create patch for the last n commits)
  git format-patch <start_commit>..<end_commit>   (Create patch for commits in range)

- git reset HEAD^                 (Reset to status of previous commit)
  git reset commit                (Reset status of a given commit)
  git reset ORIG_HEAD             (Reset to status of previous HEAD)
  git reset <reset_point> <file>  (Reset file to status of a given reset point)

- git reset [--soft | --mixed | --hard ]
    commit: working -> stage -> commit
    --soft:  back to stage step     (changes can be seen with 'git diff --cache')
    --mixed: back to working stage  (changes can be seen with 'git diff')
    --hard:  back to a givin commit (cannot see original stuff)
    default is '--mixed'

* If makes a wrong reset, how to get things back:
  Method 1. # git reset ORIG_HEAD
  Method 2. use 'git fsck' to check all commits that is not in 'git log'
  Method 3. check 'reflog' to see all reset and checkout history

- git reflog (check all history)
    example of history:
    ----
    b7057a9 HEAD@{0}: reset: moving to b7057a9
    98abc5a HEAD@{1}: commit: more stuff added to foo
    b7057a9 HEAD@{2}: commit (initial): initial commit
  use 'git reset' to the point you want, and everything is back.
  example: git reset 98abc5a

- git am -3 <patch> (Apply patches)
- git apply <patch> (Apply patch without commit)
- patch -p1 <patch> (Apply patch without git)

- git log    (Show commits)
  git log <start_commit>..<end_commit>   (Only show commits in range)

* Set display format for 'git log'
  git log --pretty=format:"<your_format>"
# git log --pretty=format:"%h %an >> %s"
    the above will show "commit_hash author >> oneline_commit"
    ---
    b8dccb9 Kevin Shi >> drivers: misc: xxx: fix wrong id
    a0e4811 Aladdin Chang >> env: use 128MByte as default max gunzip size
    ccc383b yachun >> dts: a3900: Add xxx board
    ---
    refer to https://git-scm.com/docs/pretty-formats for 'placeholer' desription


* Commit steps
  1. check diff
     # git diff
  2. add change you want to put in this commit
     you can leave other change to another commit
     # git add -i (enter interactive mode)
     2.a. choose action
          > add untracked (add files to git repository)
          > update        (add file change to staging)
          > patch         (add part of file change to staging, see 'git add -p' for more info)
     2.b. enter index number, to choose files
          > use comma between numbers (example: 1, 3 ==> choose 1 and 3 only)
          > use dash between numbers  (example: 1-3  ==> choose 1, 2, and 3)
          > use star '*' will select all files
     2.c. press enter will exit current stage
     2.d. press 'q' to exit 'git add -i'
  3. check staging changes before commit
     # git diff --cached
  4. check the change that is left out
     (the change you will put in next commit, or no need to commit)
     # git diff
  5. if everything is as what you want, commit the staging
     otherwise, back to step 2 to modify the staging
     # git commit


* Only add part of change in a file to staging for commit
  git add -p <file>
  > y   (add to staging)
  > n   (not add to staging)
  > s   (split current changes to smaller chunk and ask again)


* Steps to push to remote repository (good habit)
  1. Create a new branch and re-arrange the commits you want to push
     git rebase -i HEAD~<number of patch to rebase>
  2. Download latest change from remote
     git fetch <remote_repository> <branch>
     you can use one of below methods to check which remote branch you are following:
     2.a. check .git/config
     2.b. tig
  3. Rebase to make sure your local branch is sync with remote
     git rebase <remote_repository>/<branch>
  4. If no conflict, you can push now
     git push <remote> <local_branch>:<remote_branch>
     4.a. if the local branch has the same name as remote branch, use below command
          git push <remote> <remote_branch>
     4.b. use comma before branch name when push will delete remote branch
          git push <remote> :<remote_branch>
  5. If you need to modify commits and push to the same branch
     (for example: fix pull request and push again)
    5.a. Use below method to modify your commit
         * git commit --amend (can fix comment, author, etc)
         * git rebase -i (can merge commits, fix/reorder commits, modify comments, etc)
    5.b. git push --force <remote> <remote_branch>


* modify the first commit with 'git rebase':
# git rebase -i --root

- git rebase -i <commits_to_rearrange>
  commits_to_rearrange: HEAD~<number>   (the last n commits)
    1. remove the lines with the commits you want to delete
    2. change commits sequence according to your need
    3. replace 'pick' with below actions
       'squash': merge this commit with previous one, and you can modify comment
       'fixup' : same as squash but discard comment of this commit
       'reword': modify commit comment
       'edit'  : stop at this commit and you can modify files and commit

                 Option A. Add more changes
                 A.1. modify files
                 A.2. add changes to stage
                 A.3. create another commit.
                      if no, the changes will be merge to the original commit
                 A.4. git rebase --continue

                 Option B. Split commit to several commits
                 B.1. revert changes
                      # git reset HEAD^
                 B.2. show un-stage changes
                      # git diff
                 B.3. add some of changes to stage
                 B.4. show staging changes
                      # git diff --cached
                 B.5. commit changes
                 B.6. repeat B.2-B.5
                 B.7. git rebase --continue


* Rebase current branch with a new base instead of old base
  Use case: applying a group of patches from one branch to another
- git rebase --onto <new_base> <current_base> --strategy recursive
  example:
  new_base:     commit or another_branch
  current_base: commit (the base that will be replaced)

  current_branch: commit_5638e8b + patches
  we want new_branch to become: new_base + patches

  # git checkout current_branch
  # git checkout -b new_branch
  # git rebase --onto new_base 5638e8b
  (the new_branch will have new_base + paches after commit 5638e8b)

* Create bare repository on remote site
  1. clone a bare repository
     # git clone --bare --shared <url> <bare_repository>
  2. change branch pointed by HEAD
     # git symbolic-ref HEAD refs/heads/{master, or whatever you have in remote repo}

* Create bare respository on local site
  # mkdir <dir>
  # cd <dir>
  # git init --bare --shared

* git archive
    Archive the git repository into a tarball
    the command is complicated, so here create simple function  in .bashrc

    ----- append the following lines to ~/.bashrc ----
    _git_archive()
    {
        local prefix=$1;
        local commit="HEAD"
        if [ $# -eq 0 ]; then
            echo "usage: git-ar prefix <commit>"
            return
        fi
        if [ $# -eq 2 ]; then
            commit=$2
        fi
        echo "git archive --format=tar --prefix=$prefix/ $commit | bzip2 > $prefix.tar.bz2"
        git archive --format=tar --prefix=$prefix/ $commit | bzip2 > $prefix.tar.bz2
    }

    alias git-ar='_git_archive'
    ------------------

    1. # git-ar linux-gcaab12f caab12f
       Archive commit caab12f into a tarball named 'linux-gcaab12f.tar.bz2'
       with directory prefix=linux-gcaab12f/
    2. # git-ar uboot.2012-11-12
       Archive current HEAD into a tarball named 'uboot.2012-11-12.tar.bz2'
       with directory prefix=uboot.2012-11-12/
