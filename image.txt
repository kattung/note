Extend ext4 image size
-------------
sudo e2fsck -f <ext4_file>
sudo resize2fs <ext4_file> 16G


Modify ext4 content
-------------
debugfs -w -f $cmd_file $new_ext4

cmd_file example
---
cd /home/root/
write <host_dir>/400.perlbench.tgz 400.perlbench.tgz
symlink <dest> <source>
ls /home/root
---


How to program SD card
-------------
xzcat rootfs.wic.xz | sudo dd of=/dev/sdX bs=512K iflag=fullblock oflag=direct conv=fsync status=progress


How to resize SD partition and reprogram
-------------
sudo sgdisk -v /dev/sdc
sudo sgdisk -e /dev/sdc
sudo parted /dev/sdc resizepart 4 100%
sudo resize2fs /dev/sdc4
sync
(until now the partition still not resized,
 you should use fdisk or mkfs to manipulate it)

method 1: use 'fdisk' to delete and create a new partition
method 2: use 'mkfs' to format the partition, and it will be the right size

Example:
sudo mkfs.ext4 /dev/sdc4
sudo mount /dev/sdc4 ~/mnt
cd ~/mnt
sudo rsync -avH /rootfs/* .


How to create image from rootfs directory
--------------
Use dd + fdisk + mkfs + mount

Create a raw disk image file using dd if=/dev/zero of=image.raw bs=1M count=50 That will make a 50 megabyte image file out of zeros.

If you want to operate on a block device instead of a file, you can loopback mount image.raw as a block device (read losetup man page)

You can partition the file or loopback device using regular fdisk or sfdisk utilities. Then you can either use other dd options (read the man page for it) or other options to put your bin files into the right places in the disk image.

After that, undo the loopback device if you made one, and start your qemu / qemu-kvm session using the image.raw file as your disk device. If you did your bootloader correctly the qemu bios will start it.

Example:
dd if=/dev/zero of=rootfs_all_210423.img bs=1G count=5
sudo fdisk -l rootfs_all_210423.img
sudo mkfs.ext4 rootfs_all_210423.img
sudo mount rootfs_all_210423.img ~/mnt
sudo rsync -avH <rootfs_dir>/* ~/mnt

after boot Linux on QEMU:
mount /dev/vda /mnt
